#!/bin/usr/python3

try:
    import tkinter as tk
    from time import time

    from labyrinthe import *
except ImportError as e:
    print(e)

class Application(tk.Frame):
    def __init__(self, boss =None):
        tk.Frame.__init__(self, boss)
        self.boss = boss
        self.sizemap = (31, 21)
        self.pas = 20
        self.canvas = tk.Canvas(self, width =self.sizemap[0] * self.pas,
                                height =self.sizemap[1] * self.pas)
        self.canvas.pack()
        self.laby = Labyrinthe(self.canvas)
        self.create_bomberman()    
        
        self.verify()
        self.pack()

    def verify(self):
        """Fonction timer pour vÃ©rifier le temps ou la fin de la partie"""
        #if Bombe.ensBomb != set():
        if Bombe.listBomb[0].start > 2:
            Bombe.listBomb[0].explode()
        self.after(100, self.verify)

    def create_bomberman(self):
        self.keysKeyboards = [['<Up>', '<Down>', '<Left>', '<Right>', '<space>'],
                              ['<z>', '<s>', '<q>', '<d>', '<f>'],
                              ['<o>', '<l>', '<k>', '<m>', '<j>'],
                              ['<t>', '<g>', '<f>', '<h>', '<y>']]

        self.players = ['Jean', 'Antoine']
        self.startingPositions = [(0, 0),
                                   (0, self.sizemap[1] - 1),
                                   (self.sizemap[0] - 1, 0),
                                   (self.sizemap[0] - 1, self.sizemap[1] - 1)]
        self.colors = ['red', 'blue', 'yellow', 'black', 'green', 'purple',
                       'pink', 'brown']

        self.listBombermans = {}

        for player, position, color, keys in zip(self.players,
            self.startingPositions, self.colors, self.keysKeyboards):
            self.listBombermans[player] = Bomberman(self.canvas, position,
                                                    color, keys, player)
            

class Labyrinthe():
    def __init__(self, boss):
        self.boss = boss
        self.sizemap = boss.master.sizemap
        self.pas = boss.master.pas
        self.draw_laby()

    def algo_laby(self, ens):
        ensCaseVide = ens
        #ensCaseVide = self.algoLaby(ensCaseVide)
        ensCaseVide = genereMap(ensCaseVide, self.sizemap)
        ensTotal = {(x, y) for x in range(self.sizemap[0])
                    for y in range(self.sizemap[1])}
        self.ensBlock = ensTotal - ensCaseVide


    def remove_block(self, *position):
        for coord in position:
            (x, y) = (coord[0] * self.pas, coord[1] * self.pas)
            self.boss.create_rectangle(x, y, x + self.pas, y + self.pas,
                                       fill='blue')

    def draw_laby(self):
        self.algo_laby({(0, 0)})
        for block in self.ensBlock:
            (x, y) = (block[0] * self.pas, block[1] * self.pas)
            self.boss.create_rectangle(x, y, x + self.pas, y + self.pas,
                                       fill='grey')
        
class Bomberman():
    def __init__(self, boss, positionDepart, color, keys, name):
        self.boss = boss
        self.name = name
        self.position = positionDepart
        self.color = color
        self.keys = keys
        self.sizemap = boss.master.sizemap
        self.pas = boss.master.pas
        (x, y) = self.position[0] * self.pas, self.position[1] * self.pas
        self.id = self.boss.create_oval(x + 5, y + 5, x + self.pas - 5,
                                       y + self.pas - 5, fill =color)
        self.numberBomb = 10
        self.power = 5
        self.move()

    def move(self):
        possible = ['N', 'S', 'W', 'E', 'Put Bomb']
        for i in range(5):
            self.boss.master.boss.bind(self.keys[i], lambda event =0,
                                       cmd =possible[i]:
                                       self.action(event, cmd))
                
    def action(self, event, cmd):
        (x, y) = self.position
        #print(cmd)
        if cmd == 'N':
            y -= 1
        elif cmd == 'S':
            y += 1
        elif cmd == 'W':
            x -= 1
        elif cmd == 'E':
            x += 1
        #print((x, y) in block)
        ensBlock = self.boss.master.laby.ensBlock
        if (x, y) in ensBlock or x < 0 or x >= self.sizemap[0] \
           or y < 0 or y >= self.sizemap[1]:
            pass
        else:
            self.position = (x, y)
            #print(self.pos)
            self.boss.coords(self.id, x * self.pas + 5, y * self.pas + 5,
                            x * self.pas + self.pas - 5,
                            y * self.pas + self.pas - 5)
            self.boss.tag_raise(self.id)
        if cmd == 'Put Bomb' and self.numberBomb:
            self.numberBomb -= 1
            Bombe.ensBomb.add(Bombe(self.boss, self.position, self.power,
                                     self.name))

    def game_over(self):
        for i in range(5):
            self.boss.master.boss.bind(self.keys[i], self.none_action)
        self.boss.coords(self.id, -10, -10, -10, -10)

    def none_action(self):
        pass

class Bombe():
    #1/ Afficher Bombe
    #2/ Ajout dans un ensemble
    #3/ Lancer un Timer
    ensBomb = set()
    def __init__(self, boss, position, power, name):
        self.pas = boss.master.laby.pas
        self.boss = boss
        self.position = position
        self.power = power
        self.name = name
        self.start = time()
        (x, y) = self.position[0] * self.pas, self.position[1] * self.pas
        self.boss.create_oval(x + 7, y + 7, x + self.pas - 7,
                                       y + self.pas - 7, fill='red')
        self.boss.master.laby.ensBlock.add(self.position)

    def listExplode(self):
        ensBlock = self.boss.master.laby.ensBlock - {self.position}
        self.ensTotal = set()
        for i in range(self.power + 1):
            add = (self.position[0], self.position[1] + i)
            self.ensTotal.add(add)
            if add in ensBlock:
                break
        for i in range(self.power + 1):
            add = (self.position[0], self.position[1] - i)
            self.ensTotal.add(add)
            if add in ensBlock:
                break
        for i in range(self.power + 1):
            add = (self.position[0] + i, self.position[1])
            self.ensTotal.add(add)
            if add in ensBlock:
                break
        for i in range(self.power + 1):
            add = (self.position[0] - i, self.position[1])
            self.ensTotal.add(add)
            if add in ensBlock:
                break
        #print(self.ensTotal)

    def explode(self):
        try:
            Bombe.ensBomb.pop()
        except:
            #print('1')
            pass
        self.listExplode()
        self.listExplosion = []
        for block in self.ensTotal:
            (x, y) = block[0] * self.pas, block[1] * self.pas
            self.listExplosion.append(self.boss.create_rectangle(x, y,
                                      x + self.pas, y + self.pas, fill='red', outline = 'white'))
            try:
                self.boss.master.laby.ensBlock.remove(block)
            except:
                pass
            for bomberman in self.boss.master.listBombermans.values():
                if bomberman.position in self.ensTotal:
                    bomberman.game_over()
        self.boss.master.after(150, self.end_explode)

    def end_explode(self):
        for block in self.ensTotal:
            #print(self.listExplosion)
            (x, y) = block[0] * self.pas, block[1] * self.pas
            self.boss.create_rectangle(x, y,
                                      x + self.pas, y + self.pas, fill='white', outline = 'white')
        
        
        

if __name__ == '__main__':
    winRoot = tk.Tk()
    Application(winRoot).mainloop()

